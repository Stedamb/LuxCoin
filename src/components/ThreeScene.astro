<!-- ---
// A Three.js scene component for Astro displaying a Roman coin 3D model
---

<div id="three-container" class="w-full h-full absolute top-0 left-0 z-0">
  <div class="absolute inset-0 flex items-center justify-center text-white pointer-events-none loading-text">
    Loading 3D model...
  </div>
</div>

<style>
  .loading-text {
    opacity: 1;
    transition: opacity 0.5s ease-out;
  }
  .loading-text.hidden {
    opacity: 0;
  }
</style>

<script>
  import * as THREE from 'three';
  import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
  import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

  // Set up the scene
  const scene = new THREE.Scene();
  
  // Set up the camera
  const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
  camera.position.z = 999;  // Moved camera further back
  camera.position.y = 0;   // Adjusted height
  
  // Set up the renderer
  const container = document.getElementById('three-container');
  const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
  // Get parent container dimensions instead of using window dimensions
  if (container) {
    const containerRect = container.getBoundingClientRect();
    renderer.setSize(containerRect.width, containerRect.height);
  } else {
    // Fallback to window dimensions if container is not found
    renderer.setSize(window.innerWidth, window.innerHeight);
  }
  renderer.setClearColor(0x000000, 0); // Set alpha to 0 for full transparency
  renderer.shadowMap.enabled = true;
  renderer.shadowMap.type = THREE.PCFSoftShadowMap;
  if (container) {
    container.appendChild(renderer.domElement);
  }
  
  // Add orbit controls to allow rotating the model but disable zooming/scrolling
  const controls = new OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true;
  controls.dampingFactor = 0.005;  // Further reduced friction for more momentum
  controls.rotateSpeed = 5;      // Increased rotation speed for more force
  controls.screenSpacePanning = false;
  controls.enableZoom = false;  // Disable zooming with scroll wheel
  controls.enablePan = false;   // Disable panning
  controls.minDistance = 5;     // Increased min distance
  controls.maxDistance = 20;    // Increased max distance
  
  // Restrict rotation to horizontal only (Y-axis)
  controls.minPolarAngle = Math.PI / 2; // 90 degrees
  controls.maxPolarAngle = Math.PI / 2; // 90 degrees
  
  // Add lighting
  const ambientLight = new THREE.AmbientLight(0xffffff, 5);
  scene.add(ambientLight);
  
  const directionalLight = new THREE.DirectionalLight(0xffffff, 5);
  directionalLight.position.set(15, 15, 15);
  scene.add(directionalLight);
  
  // Add a second directional light from another angle
  const directionalLight2 = new THREE.DirectionalLight(0xffffff, 1.8);
  directionalLight2.position.set(-5, 5, -15);
  directionalLight2.castShadow = true;
  
  scene.add(directionalLight2);
  
  // Variable to store the loaded model
  let coinModel;
  let rotationSpeed = 0.005;
  let autoRotate = false;
  
  // Function to position the coin based on screen size
  function positionCoinResponsively() {
    if (!coinModel) return;
    
    // Check if we're on mobile (less than 768px width)
    const isMobile = window.innerWidth < 768;
    
    // Get model dimensions
    const box = new THREE.Box3().setFromObject(coinModel);
    const center = box.getCenter(new THREE.Vector3());
    
    // Center the model vertically and depth-wise
    coinModel.position.x = center.x + 1.8;
    coinModel.position.y = center.y;
    coinModel.position.z = center.z - .2;
    
    if (isMobile) {
      // Center horizontally on mobile
    } else {
      // Position towards the right on desktop
      // Adjust the multiplier to control how far right it appears
      // coinModel.position.x = -center.x + (window.innerWidth / 5000);
    }
  }
  
  // Load the Roman coin model
  const loader = new GLTFLoader();
  loader.load(
    '/models/roman_coin/scene.gltf',
    (gltf) => {
      // Hide loading text
      const loadingText = document.querySelector('.loading-text');
      if (loadingText) {
        loadingText.classList.add('hidden');
      }
      
      coinModel = gltf.scene;
      
      // Adjust model scale and position
      coinModel.scale.set(.38, .2, .2);  // Reduced scale to show more of the model
      
      // Position the coin responsively
      positionCoinResponsively();
      
      // Enable shadows for all meshes in the model
      coinModel.traverse((node) => {
        if (node.isMesh) {
          node.castShadow = true;
          node.receiveShadow = true;
        }
      });
      
      scene.add(coinModel);
    },
    (xhr) => {
      // Loading progress
      console.log((xhr.loaded / xhr.total * 100) + '% loaded');
    },
    (error) => {
      console.error('An error happened while loading the model:', error);
    }
  );
  
  // Handle window resize
  window.addEventListener('resize', () => {
    // Update renderer size to match container dimensions
    if (container) {
      const containerRect = container.getBoundingClientRect();
      renderer.setSize(containerRect.width, containerRect.height);
      
      // Update camera aspect ratio based on container dimensions
      camera.aspect = containerRect.width / containerRect.height;
    } else {
      // Fallback to window dimensions if container is not found
      renderer.setSize(window.innerWidth, window.innerHeight);
      camera.aspect = window.innerWidth / window.innerHeight;
    }
    camera.updateProjectionMatrix();
    
    // Reposition the coin based on new screen size
    positionCoinResponsively();
  });
  
  // Animation loop
  function animate() {
    requestAnimationFrame(animate);
    
    // Update controls
    controls.update();
    
    // Rotate coin if auto-rotate is enabled
    if (autoRotate) {
      coinModel.rotation.y += rotationSpeed;
    }

    
    renderer.render(scene, camera);
  }
  
  animate();
</script> -->
